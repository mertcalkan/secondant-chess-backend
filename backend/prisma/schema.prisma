generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          Int       @id @default(autoincrement())
  white       String
  black       String
  result      String
  resultReason ResultReason
  pgn         String
  createdAt   DateTime  @default(now())

  gameSource  GameSource 
  gameVariant GameVariant @default(Standard)
  fromPosition String // FEN string or Chess960 ID.

  playedOnDGT Boolean
  organization String?
  year        Int?
  city        String?
  country     String?

  positions   Position[]
  puzzles     Puzzle[] 
  timeControl String?
}
model Position {
  id              Int    @id @default(autoincrement())
  fen             String // Board state in FEN notation
  moveNum         Int?   // Move number (if part of a game)
  gameId          Int?   // Game reference (if applicable)
  game            Game?  @relation(fields: [gameId], references: [id])

  // Piece Data
  whitePieces     Json   // JSON storing all white pieces
  blackPieces     Json   // JSON storing all black pieces

  // Board Control Data
  whiteControl    Json   // JSON storing squares controlled by white (square: count)
  blackControl    Json   // JSON storing squares controlled by black (square: count)

  // Material Equality
  whiteAdvantage Json
  blackAdvantage Json

  // Position Features
  turn           String // "white" or "black" (whose move it is)
  isCheck        Boolean @default(false)
  isDoubleCheck  Boolean @default(false)
  isDiscoveredCheck Boolean @default(false)
  isMate         Boolean @default(false)

  createdAt      DateTime @default(now())

  // Accuracy Stats
  whiteAccuracy  Float?
  blackAccuracy  Float?
  whiteAverageCentipawnLoss Float?
  blackAverageCentipawnLoss Float?
  whiteBlunderMove Int?
  whiteInAccuracyMove Int?
  blackBlunderMove Int?
  blackInAccuracyMove Int?

  // Identification of position
  fromEcoCode    String?
  fromOpening    String?
  fromVariation  String?
  positionPhase  PositionPhase
  positionEvaluation PositionEvaluation 
}

model Puzzle {
  id            Int    @id @default(autoincrement())
  puzzleType    PuzzleType @default(Standard) 
  puzzleLevel   String
  puzzleTheme   String[]
  puzzleLength  String 
  puzzlePhase   PositionPhase[]
  fromEcoCode   String?
  fromOpening   String?
  fromVariation String?
  goal          String // attack, defense, mate
  gameId        Int?   
  game          Game? @relation(fields: [gameId], references: [id])
  createdAt     DateTime @default(now())
}

enum GameType {
  OTB
  ONLINE
}

enum GameVariant {
  Standard
  Chess960
}

enum PositionPhase {
  Opening
  Middlegame
  Endgame
}

enum PuzzleType {
  Standard
  Etude
  Composition
}

enum ResultReason {
  FiftyMoveRule
  ThreefoldRepetition
  Resignation
  AgreeingOnDraw
  Stalemate
  InsufficientMaterial
  Checkmate
}

enum GameSource {
  Lichess
  ChessCom
  OTB
}

enum PositionEvaluation {
  NotEval
  WhiteHugeAdvantage
  WhiteMuchBetter
  WhiteBetter
  WhiteSlightlyBetter
  Equal
  BlackSlightlyBetter
  BlackBetter
  BlackMuchBetter
  BlackHugeAdvantage
  WhiteMatesInN
  BlackMatesInN
}